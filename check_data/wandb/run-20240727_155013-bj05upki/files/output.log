[1m================================================= test session starts ==================================================
platform linux -- Python 3.12.4, pytest-8.0.2, pluggy-1.5.0 -- /home/lindsay/miniconda3/envs/mlflow-d2c8f82fbae4739797a400248dc26c5b3a522318/bin/python3.12
cachedir: .pytest_cache
rootdir: /mnt/d/Github/genre_classification/check_data
[1mcollected 4 items                                                                                                      
test_data.py::test_column_presence_and_type [32mPASSED
test_data.py::test_class_names [32mPASSED
test_data.py::test_column_ranges [32mPASSED
test_data.py::test_kolmogorov_smirnov [31mFAILED
======================================================= FAILURES =======================================================
[31m[1m_______________________________________________ test_kolmogorov_smirnov ________________________________________________
data = (       Unnamed: 0  danceability  ...                        title                                    text_feature
0  ...    0.529  ...       Best of Hardstyle 2020                         Best of Hardstyle 2020
[41975 rows x 19 columns])
ks_alpha = 0.05
    def test_kolmogorov_smirnov(data, ks_alpha):
        sample1, sample2 = data
        columns = [
            "danceability",
            "energy",
            "loudness",
            "speechiness",
            "acousticness",
            "instrumentalness",
            "liveness",
            "valence",
            "tempo",
            "duration_ms"
        ]
        # Bonferroni correction for multiple hypothesis testing
        # (see my blog post on this topic to see where this comes from:
        # https://towardsdatascience.com/precision-and-recall-trade-off-and-multiple-hypothesis-testing-family-wise-error-rate-vs-false-71a85057ca2b)
        alpha_prime = 1 - (1 - ks_alpha)**(1 / len(columns))
        for col in columns:
            # Get rid of the extra index column
>           sample1 = sample1.drop(columns=["Unnamed: 0"])
[31m[1mtest_data.py[39m[22m:115:
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _
[31m[1m/home/lindsay/miniconda3/envs/mlflow-d2c8f82fbae4739797a400248dc26c5b3a522318/lib/python3.12/site-packages/pandas/core/frame.py[39m[22m:5568: in drop
    return super().drop(
[31m[1m/home/lindsay/miniconda3/envs/mlflow-d2c8f82fbae4739797a400248dc26c5b3a522318/lib/python3.12/site-packages/pandas/core/generic.py[39m[22m:4785: in drop
    obj = obj._drop_axis(labels, axis, level=level, errors=errors)
[31m[1m/home/lindsay/miniconda3/envs/mlflow-d2c8f82fbae4739797a400248dc26c5b3a522318/lib/python3.12/site-packages/pandas/core/generic.py[39m[22m:4827: in _drop_axis
    new_axis = axis.drop(labels, errors=errors)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _
self = Index(['danceability', 'energy', 'key', 'loudness', 'mode', 'speechiness',
       'acousticness', 'instrumentalness', ...  'type', 'duration_ms', 'time_signature', 'genre', 'song_name', 'title',
       'text_feature'],
      dtype='object')
labels = array(['Unnamed: 0'], dtype=object), errors = 'raise'
    def drop(
        self,
        labels: Index | np.ndarray | Iterable[Hashable],
        errors: IgnoreRaise = "raise",
    ) -> Index:
        """
        Make new Index with passed list of labels deleted.
        Parameters
        ----------
        labels : array-like or scalar
        errors : {'ignore', 'raise'}, default 'raise'
            If 'ignore', suppress error and existing labels are dropped.
        Returns
        -------
        Index
            Will be same type as self, except for RangeIndex.
        Raises
        ------
        KeyError
            If not all of the labels are found in the selected axis
        Examples
        --------
        >>> idx = pd.Index(['a', 'b', 'c'])
        >>> idx.drop(['a'])
        Index(['b', 'c'], dtype='object')
        """
        if not isinstance(labels, Index):
            # avoid materializing e.g. RangeIndex
            arr_dtype = "object" if self.dtype == "object" else None
            labels = com.index_labels_to_array(labels, dtype=arr_dtype)
        indexer = self.get_indexer_for(labels)
        mask = indexer == -1
        if mask.any():
            if errors != "ignore":
>               raise KeyError(f"{labels[mask].tolist()} not found in axis")
[31m[1mE               KeyError: "['Unnamed: 0'] not found in axis"
[31m[1m/home/lindsay/miniconda3/envs/mlflow-d2c8f82fbae4739797a400248dc26c5b3a522318/lib/python3.12/site-packages/pandas/core/indexes/base.py[39m[22m:7070: KeyError
[33m=================================================== warnings summary ===================================================
<frozen importlib._bootstrap>:488
  <frozen importlib._bootstrap>:488: DeprecationWarning: Type google._upb._message.MessageMapContainer uses PyType_Spec with a metaclass that has custom tp_new. This is deprecated and will no longer be allowed in Python 3.14.
<frozen importlib._bootstrap>:488
  <frozen importlib._bootstrap>:488: DeprecationWarning: Type google._upb._message.ScalarMapContainer uses PyType_Spec with a metaclass that has custom tp_new. This is deprecated and will no longer be allowed in Python 3.14.
../../../../../home/lindsay/miniconda3/envs/mlflow-d2c8f82fbae4739797a400248dc26c5b3a522318/lib/python3.12/site-packages/wandb/analytics/sentry.py:90
  /home/lindsay/miniconda3/envs/mlflow-d2c8f82fbae4739797a400248dc26c5b3a522318/lib/python3.12/site-packages/wandb/analytics/sentry.py:90: SentryHubDeprecationWarning: `sentry_sdk.Hub` is deprecated and will be removed in a future major release. Please consult our 1.x to 2.x migration guide for details on how to migrate `Hub` usage to the new API: https://docs.sentry.io/platforms/python/migration/1.x-to-2.x
    self.hub = sentry_sdk.Hub(client)
../../../../../home/lindsay/miniconda3/envs/mlflow-d2c8f82fbae4739797a400248dc26c5b3a522318/lib/python3.12/site-packages/google/protobuf/internal/well_known_types.py:174: 5 warnings
test_data.py: 12 warnings
  /home/lindsay/miniconda3/envs/mlflow-d2c8f82fbae4739797a400248dc26c5b3a522318/lib/python3.12/site-packages/google/protobuf/internal/well_known_types.py:174: DeprecationWarning: datetime.datetime.utcnow() is deprecated and scheduled for removal in a future version. Use timezone-aware objects to represent datetimes in UTC: datetime.datetime.now(datetime.UTC).
    self.FromDatetime(datetime.datetime.utcnow())
test_data.py::test_column_presence_and_type
  /mnt/d/GitHub/nd0821-c2-build-model-workflow-exercises/nd0821-c2-build-model-workflow-exercises/lesson-5-final-pipeline-release-and-deploy/exercises/exercise_14/solution/check_data/conftest.py:29: DtypeWarning: Columns (16) have mixed types. Specify dtype option on import or set low_memory=False.
    sample1 = pd.read_csv(local_path)
test_data.py::test_column_presence_and_type
  /mnt/d/GitHub/nd0821-c2-build-model-workflow-exercises/nd0821-c2-build-model-workflow-exercises/lesson-5-final-pipeline-release-and-deploy/exercises/exercise_14/solution/check_data/conftest.py:32: DtypeWarning: Columns (16) have mixed types. Specify dtype option on import or set low_memory=False.
    sample2 = pd.read_csv(local_path)
-- Docs: https://docs.pytest.org/en/stable/how-to/capture-warnings.html
[36m[1m=============================================== short test summary info ================================================
[31mFAILED[39m test_data.py::[1mtest_kolmogorov_smirnov[22m - KeyError: "['Unnamed: 0'] not found in axis"
[31m======================================= [1m1 failed[39m[22m, [32m3 passed[39m, [33m22 warnings[31m in 3.94s =======================================