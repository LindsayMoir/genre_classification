[1m================================================= test session starts ==================================================
platform linux -- Python 3.12.4, pytest-8.0.2, pluggy-1.5.0 -- /home/lindsay/miniconda3/envs/mlflow-d2c8f82fbae4739797a400248dc26c5b3a522318/bin/python3.12
cachedir: .pytest_cache
rootdir: /mnt/d/GitHub/nd0821-c2-build-model-workflow-exercises/nd0821-c2-build-model-workflow-exercises/lesson-5-final-pipeline-release-and-deploy/exercises/exercise_14/solution/check_data
[1mcollected 4 items                                                                                                      
test_data.py::test_column_presence_and_type [31mERROR
test_data.py::test_class_names [31mERROR
test_data.py::test_column_ranges [31mERROR
test_data.py::test_kolmogorov_smirnov [31mERROR
======================================================== ERRORS ========================================================
[31m[1m___________________________________ ERROR at setup of test_column_presence_and_type ____________________________________
args = (<wandb.apis.public.api.Api object at 0x7f01bbfab2f0>,)
kwargs = {'name': 'exercise_14/preprocessed_data.csv:latest', 'type': None}
message = 'Unable to fetch artifact with name tragoes/exercise_14/preprocessed_data.csv:latest'
payload = 'Unable to fetch artifact with name tragoes/exercise_14/preprocessed_data.csv:latest'
    @wraps(func)
    def wrapper(*args, **kwargs):
        message = "Whoa, you found a bug."
        try:
>           return func(*args, **kwargs)
[31m[1m/home/lindsay/miniconda3/envs/mlflow-d2c8f82fbae4739797a400248dc26c5b3a522318/lib/python3.12/site-packages/wandb/apis/normalize.py[39m[22m:41:
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _
[31m[1m/home/lindsay/miniconda3/envs/mlflow-d2c8f82fbae4739797a400248dc26c5b3a522318/lib/python3.12/site-packages/wandb/apis/public/api.py[39m[22m:958: in artifact
    artifact = wandb.Artifact._from_name(
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _
cls = <class 'wandb.sdk.artifacts.artifact.Artifact'>, entity = 'tragoes', project = 'exercise_14'
name = 'preprocessed_data.csv:latest', client = <wandb.apis.public.api.RetryingClient object at 0x7f01bbfd83e0>
    @classmethod
    def _from_name(
        cls, entity: str, project: str, name: str, client: RetryingClient
    ) -> "Artifact":
        query = gql(
            """
            query ArtifactByName(
                $entityName: String!,
                $projectName: String!,
                $name: String!
            ) {
                project(name: $projectName, entityName: $entityName) {
                    artifact(name: $name) {
                        ...ArtifactFragment
                    }
                }
            }
            """
            + cls._get_gql_artifact_fragment()
        )
        response = client.execute(
            query,
            variable_values={
                "entityName": entity,
                "projectName": project,
                "name": name,
            },
        )
        attrs = response.get("project", {}).get("artifact")
        if attrs is None:
>           raise ValueError(
                f"Unable to fetch artifact with name {entity}/{project}/{name}"
            )
[31m[1mE           ValueError: Unable to fetch artifact with name tragoes/exercise_14/preprocessed_data.csv:latest
[31m[1m/home/lindsay/miniconda3/envs/mlflow-d2c8f82fbae4739797a400248dc26c5b3a522318/lib/python3.12/site-packages/wandb/sdk/artifacts/artifact.py[39m[22m:254: ValueError
[33mDuring handling of the above exception, another exception occurred:
request = <SubRequest 'data' for <Function test_column_presence_and_type>>
    @pytest.fixture(scope="session")
    def data(request):
        reference_artifact = request.config.option.reference_artifact
        if reference_artifact is None:
            pytest.fail("--reference_artifact missing on command line")
        sample_artifact = request.config.option.sample_artifact
        if sample_artifact is None:
            pytest.fail("--sample_artifact missing on command line")
>       local_path = run.use_artifact(reference_artifact).file()
[31m[1mconftest.py[39m[22m:28:
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _
[31m[1m/home/lindsay/miniconda3/envs/mlflow-d2c8f82fbae4739797a400248dc26c5b3a522318/lib/python3.12/site-packages/wandb/sdk/wandb_run.py[39m[22m:371: in wrapper_fn
    return func(self, *args, **kwargs)
[31m[1m/home/lindsay/miniconda3/envs/mlflow-d2c8f82fbae4739797a400248dc26c5b3a522318/lib/python3.12/site-packages/wandb/sdk/wandb_run.py[39m[22m:361: in wrapper
    return func(self, *args, **kwargs)
[31m[1m/home/lindsay/miniconda3/envs/mlflow-d2c8f82fbae4739797a400248dc26c5b3a522318/lib/python3.12/site-packages/wandb/sdk/wandb_run.py[39m[22m:2783: in use_artifact
    artifact = public_api.artifact(type=type, name=name)
[31m[1m/home/lindsay/miniconda3/envs/mlflow-d2c8f82fbae4739797a400248dc26c5b3a522318/lib/python3.12/site-packages/wandb/apis/normalize.py[39m[22m:87: in wrapper
    raise CommError(message, err).with_traceback(sys.exc_info()[2])
[31m[1m/home/lindsay/miniconda3/envs/mlflow-d2c8f82fbae4739797a400248dc26c5b3a522318/lib/python3.12/site-packages/wandb/apis/normalize.py[39m[22m:41: in wrapper
    return func(*args, **kwargs)
[31m[1m/home/lindsay/miniconda3/envs/mlflow-d2c8f82fbae4739797a400248dc26c5b3a522318/lib/python3.12/site-packages/wandb/apis/public/api.py[39m[22m:958: in artifact
    artifact = wandb.Artifact._from_name(
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _
cls = <class 'wandb.sdk.artifacts.artifact.Artifact'>, entity = 'tragoes', project = 'exercise_14'
name = 'preprocessed_data.csv:latest', client = <wandb.apis.public.api.RetryingClient object at 0x7f01bbfd83e0>
    @classmethod
    def _from_name(
        cls, entity: str, project: str, name: str, client: RetryingClient
    ) -> "Artifact":
        query = gql(
            """
            query ArtifactByName(
                $entityName: String!,
                $projectName: String!,
                $name: String!
            ) {
                project(name: $projectName, entityName: $entityName) {
                    artifact(name: $name) {
                        ...ArtifactFragment
                    }
                }
            }
            """
            + cls._get_gql_artifact_fragment()
        )
        response = client.execute(
            query,
            variable_values={
                "entityName": entity,
                "projectName": project,
                "name": name,
            },
        )
        attrs = response.get("project", {}).get("artifact")
        if attrs is None:
>           raise ValueError(
                f"Unable to fetch artifact with name {entity}/{project}/{name}"
            )
[31m[1mE           wandb.errors.CommError: Unable to fetch artifact with name tragoes/exercise_14/preprocessed_data.csv:latest
[31m[1m/home/lindsay/miniconda3/envs/mlflow-d2c8f82fbae4739797a400248dc26c5b3a522318/lib/python3.12/site-packages/wandb/sdk/artifacts/artifact.py[39m[22m:254: CommError
[31m[1m__________________________________________ ERROR at setup of test_class_names __________________________________________
args = (<wandb.apis.public.api.Api object at 0x7f01bbfab2f0>,)
kwargs = {'name': 'exercise_14/preprocessed_data.csv:latest', 'type': None}
message = 'Unable to fetch artifact with name tragoes/exercise_14/preprocessed_data.csv:latest'
payload = 'Unable to fetch artifact with name tragoes/exercise_14/preprocessed_data.csv:latest'
    @wraps(func)
    def wrapper(*args, **kwargs):
        message = "Whoa, you found a bug."
        try:
>           return func(*args, **kwargs)
[31m[1m/home/lindsay/miniconda3/envs/mlflow-d2c8f82fbae4739797a400248dc26c5b3a522318/lib/python3.12/site-packages/wandb/apis/normalize.py[39m[22m:41:
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _
[31m[1m/home/lindsay/miniconda3/envs/mlflow-d2c8f82fbae4739797a400248dc26c5b3a522318/lib/python3.12/site-packages/wandb/apis/public/api.py[39m[22m:958: in artifact
    artifact = wandb.Artifact._from_name(
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _
cls = <class 'wandb.sdk.artifacts.artifact.Artifact'>, entity = 'tragoes', project = 'exercise_14'
name = 'preprocessed_data.csv:latest', client = <wandb.apis.public.api.RetryingClient object at 0x7f01bbfd83e0>
    @classmethod
    def _from_name(
        cls, entity: str, project: str, name: str, client: RetryingClient
    ) -> "Artifact":
        query = gql(
            """
            query ArtifactByName(
                $entityName: String!,
                $projectName: String!,
                $name: String!
            ) {
                project(name: $projectName, entityName: $entityName) {
                    artifact(name: $name) {
                        ...ArtifactFragment
                    }
                }
            }
            """
            + cls._get_gql_artifact_fragment()
        )
        response = client.execute(
            query,
            variable_values={
                "entityName": entity,
                "projectName": project,
                "name": name,
            },
        )
        attrs = response.get("project", {}).get("artifact")
        if attrs is None:
>           raise ValueError(
                f"Unable to fetch artifact with name {entity}/{project}/{name}"
            )
[31m[1mE           ValueError: Unable to fetch artifact with name tragoes/exercise_14/preprocessed_data.csv:latest
[31m[1m/home/lindsay/miniconda3/envs/mlflow-d2c8f82fbae4739797a400248dc26c5b3a522318/lib/python3.12/site-packages/wandb/sdk/artifacts/artifact.py[39m[22m:254: ValueError
[33mDuring handling of the above exception, another exception occurred:
request = <SubRequest 'data' for <Function test_column_presence_and_type>>
    @pytest.fixture(scope="session")
    def data(request):
        reference_artifact = request.config.option.reference_artifact
        if reference_artifact is None:
            pytest.fail("--reference_artifact missing on command line")
        sample_artifact = request.config.option.sample_artifact
        if sample_artifact is None:
            pytest.fail("--sample_artifact missing on command line")
>       local_path = run.use_artifact(reference_artifact).file()
[31m[1mconftest.py[39m[22m:28:
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _
[31m[1m/home/lindsay/miniconda3/envs/mlflow-d2c8f82fbae4739797a400248dc26c5b3a522318/lib/python3.12/site-packages/wandb/sdk/wandb_run.py[39m[22m:371: in wrapper_fn
    return func(self, *args, **kwargs)
[31m[1m/home/lindsay/miniconda3/envs/mlflow-d2c8f82fbae4739797a400248dc26c5b3a522318/lib/python3.12/site-packages/wandb/sdk/wandb_run.py[39m[22m:361: in wrapper
    return func(self, *args, **kwargs)
[31m[1m/home/lindsay/miniconda3/envs/mlflow-d2c8f82fbae4739797a400248dc26c5b3a522318/lib/python3.12/site-packages/wandb/sdk/wandb_run.py[39m[22m:2783: in use_artifact
    artifact = public_api.artifact(type=type, name=name)
[31m[1m/home/lindsay/miniconda3/envs/mlflow-d2c8f82fbae4739797a400248dc26c5b3a522318/lib/python3.12/site-packages/wandb/apis/normalize.py[39m[22m:87: in wrapper
    raise CommError(message, err).with_traceback(sys.exc_info()[2])
[31m[1m/home/lindsay/miniconda3/envs/mlflow-d2c8f82fbae4739797a400248dc26c5b3a522318/lib/python3.12/site-packages/wandb/apis/normalize.py[39m[22m:41: in wrapper
    return func(*args, **kwargs)
[31m[1m/home/lindsay/miniconda3/envs/mlflow-d2c8f82fbae4739797a400248dc26c5b3a522318/lib/python3.12/site-packages/wandb/apis/public/api.py[39m[22m:958: in artifact
    artifact = wandb.Artifact._from_name(
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _
cls = <class 'wandb.sdk.artifacts.artifact.Artifact'>, entity = 'tragoes', project = 'exercise_14'
name = 'preprocessed_data.csv:latest', client = <wandb.apis.public.api.RetryingClient object at 0x7f01bbfd83e0>
    @classmethod
    def _from_name(
        cls, entity: str, project: str, name: str, client: RetryingClient
    ) -> "Artifact":
        query = gql(
            """
            query ArtifactByName(
                $entityName: String!,
                $projectName: String!,
                $name: String!
            ) {
                project(name: $projectName, entityName: $entityName) {
                    artifact(name: $name) {
                        ...ArtifactFragment
                    }
                }
            }
            """
            + cls._get_gql_artifact_fragment()
        )
        response = client.execute(
            query,
            variable_values={
                "entityName": entity,
                "projectName": project,
                "name": name,
            },
        )
        attrs = response.get("project", {}).get("artifact")
        if attrs is None:
>           raise ValueError(
                f"Unable to fetch artifact with name {entity}/{project}/{name}"
            )
[31m[1mE           wandb.errors.CommError: Unable to fetch artifact with name tragoes/exercise_14/preprocessed_data.csv:latest
[31m[1m/home/lindsay/miniconda3/envs/mlflow-d2c8f82fbae4739797a400248dc26c5b3a522318/lib/python3.12/site-packages/wandb/sdk/artifacts/artifact.py[39m[22m:254: CommError
[31m[1m_________________________________________ ERROR at setup of test_column_ranges _________________________________________
args = (<wandb.apis.public.api.Api object at 0x7f01bbfab2f0>,)
kwargs = {'name': 'exercise_14/preprocessed_data.csv:latest', 'type': None}
message = 'Unable to fetch artifact with name tragoes/exercise_14/preprocessed_data.csv:latest'
payload = 'Unable to fetch artifact with name tragoes/exercise_14/preprocessed_data.csv:latest'
    @wraps(func)
    def wrapper(*args, **kwargs):
        message = "Whoa, you found a bug."
        try:
>           return func(*args, **kwargs)
[31m[1m/home/lindsay/miniconda3/envs/mlflow-d2c8f82fbae4739797a400248dc26c5b3a522318/lib/python3.12/site-packages/wandb/apis/normalize.py[39m[22m:41:
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _
[31m[1m/home/lindsay/miniconda3/envs/mlflow-d2c8f82fbae4739797a400248dc26c5b3a522318/lib/python3.12/site-packages/wandb/apis/public/api.py[39m[22m:958: in artifact
    artifact = wandb.Artifact._from_name(
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _
cls = <class 'wandb.sdk.artifacts.artifact.Artifact'>, entity = 'tragoes', project = 'exercise_14'
name = 'preprocessed_data.csv:latest', client = <wandb.apis.public.api.RetryingClient object at 0x7f01bbfd83e0>
    @classmethod
    def _from_name(
        cls, entity: str, project: str, name: str, client: RetryingClient
    ) -> "Artifact":
        query = gql(
            """
            query ArtifactByName(
                $entityName: String!,
                $projectName: String!,
                $name: String!
            ) {
                project(name: $projectName, entityName: $entityName) {
                    artifact(name: $name) {
                        ...ArtifactFragment
                    }
                }
            }
            """
            + cls._get_gql_artifact_fragment()
        )
        response = client.execute(
            query,
            variable_values={
                "entityName": entity,
                "projectName": project,
                "name": name,
            },
        )
        attrs = response.get("project", {}).get("artifact")
        if attrs is None:
>           raise ValueError(
                f"Unable to fetch artifact with name {entity}/{project}/{name}"
            )
[31m[1mE           ValueError: Unable to fetch artifact with name tragoes/exercise_14/preprocessed_data.csv:latest
[31m[1m/home/lindsay/miniconda3/envs/mlflow-d2c8f82fbae4739797a400248dc26c5b3a522318/lib/python3.12/site-packages/wandb/sdk/artifacts/artifact.py[39m[22m:254: ValueError
[33mDuring handling of the above exception, another exception occurred:
request = <SubRequest 'data' for <Function test_column_presence_and_type>>
    @pytest.fixture(scope="session")
    def data(request):
        reference_artifact = request.config.option.reference_artifact
        if reference_artifact is None:
            pytest.fail("--reference_artifact missing on command line")
        sample_artifact = request.config.option.sample_artifact
        if sample_artifact is None:
            pytest.fail("--sample_artifact missing on command line")
>       local_path = run.use_artifact(reference_artifact).file()
[31m[1mconftest.py[39m[22m:28:
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _
[31m[1m/home/lindsay/miniconda3/envs/mlflow-d2c8f82fbae4739797a400248dc26c5b3a522318/lib/python3.12/site-packages/wandb/sdk/wandb_run.py[39m[22m:371: in wrapper_fn
    return func(self, *args, **kwargs)
[31m[1m/home/lindsay/miniconda3/envs/mlflow-d2c8f82fbae4739797a400248dc26c5b3a522318/lib/python3.12/site-packages/wandb/sdk/wandb_run.py[39m[22m:361: in wrapper
    return func(self, *args, **kwargs)
[31m[1m/home/lindsay/miniconda3/envs/mlflow-d2c8f82fbae4739797a400248dc26c5b3a522318/lib/python3.12/site-packages/wandb/sdk/wandb_run.py[39m[22m:2783: in use_artifact
    artifact = public_api.artifact(type=type, name=name)
[31m[1m/home/lindsay/miniconda3/envs/mlflow-d2c8f82fbae4739797a400248dc26c5b3a522318/lib/python3.12/site-packages/wandb/apis/normalize.py[39m[22m:87: in wrapper
    raise CommError(message, err).with_traceback(sys.exc_info()[2])
[31m[1m/home/lindsay/miniconda3/envs/mlflow-d2c8f82fbae4739797a400248dc26c5b3a522318/lib/python3.12/site-packages/wandb/apis/normalize.py[39m[22m:41: in wrapper
    return func(*args, **kwargs)
[31m[1m/home/lindsay/miniconda3/envs/mlflow-d2c8f82fbae4739797a400248dc26c5b3a522318/lib/python3.12/site-packages/wandb/apis/public/api.py[39m[22m:958: in artifact
    artifact = wandb.Artifact._from_name(
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _
cls = <class 'wandb.sdk.artifacts.artifact.Artifact'>, entity = 'tragoes', project = 'exercise_14'
name = 'preprocessed_data.csv:latest', client = <wandb.apis.public.api.RetryingClient object at 0x7f01bbfd83e0>
    @classmethod
    def _from_name(
        cls, entity: str, project: str, name: str, client: RetryingClient
    ) -> "Artifact":
        query = gql(
            """
            query ArtifactByName(
                $entityName: String!,
                $projectName: String!,
                $name: String!
            ) {
                project(name: $projectName, entityName: $entityName) {
                    artifact(name: $name) {
                        ...ArtifactFragment
                    }
                }
            }
            """
            + cls._get_gql_artifact_fragment()
        )
        response = client.execute(
            query,
            variable_values={
                "entityName": entity,
                "projectName": project,
                "name": name,
            },
        )
        attrs = response.get("project", {}).get("artifact")
        if attrs is None:
>           raise ValueError(
                f"Unable to fetch artifact with name {entity}/{project}/{name}"
            )
[31m[1mE           wandb.errors.CommError: Unable to fetch artifact with name tragoes/exercise_14/preprocessed_data.csv:latest
[31m[1m/home/lindsay/miniconda3/envs/mlflow-d2c8f82fbae4739797a400248dc26c5b3a522318/lib/python3.12/site-packages/wandb/sdk/artifacts/artifact.py[39m[22m:254: CommError
[31m[1m______________________________________ ERROR at setup of test_kolmogorov_smirnov _______________________________________
args = (<wandb.apis.public.api.Api object at 0x7f01bbfab2f0>,)
kwargs = {'name': 'exercise_14/preprocessed_data.csv:latest', 'type': None}
message = 'Unable to fetch artifact with name tragoes/exercise_14/preprocessed_data.csv:latest'
payload = 'Unable to fetch artifact with name tragoes/exercise_14/preprocessed_data.csv:latest'
    @wraps(func)
    def wrapper(*args, **kwargs):
        message = "Whoa, you found a bug."
        try:
>           return func(*args, **kwargs)
[31m[1m/home/lindsay/miniconda3/envs/mlflow-d2c8f82fbae4739797a400248dc26c5b3a522318/lib/python3.12/site-packages/wandb/apis/normalize.py[39m[22m:41:
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _
[31m[1m/home/lindsay/miniconda3/envs/mlflow-d2c8f82fbae4739797a400248dc26c5b3a522318/lib/python3.12/site-packages/wandb/apis/public/api.py[39m[22m:958: in artifact
    artifact = wandb.Artifact._from_name(
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _
cls = <class 'wandb.sdk.artifacts.artifact.Artifact'>, entity = 'tragoes', project = 'exercise_14'
name = 'preprocessed_data.csv:latest', client = <wandb.apis.public.api.RetryingClient object at 0x7f01bbfd83e0>
    @classmethod
    def _from_name(
        cls, entity: str, project: str, name: str, client: RetryingClient
    ) -> "Artifact":
        query = gql(
            """
            query ArtifactByName(
                $entityName: String!,
                $projectName: String!,
                $name: String!
            ) {
                project(name: $projectName, entityName: $entityName) {
                    artifact(name: $name) {
                        ...ArtifactFragment
                    }
                }
            }
            """
            + cls._get_gql_artifact_fragment()
        )
        response = client.execute(
            query,
            variable_values={
                "entityName": entity,
                "projectName": project,
                "name": name,
            },
        )
        attrs = response.get("project", {}).get("artifact")
        if attrs is None:
>           raise ValueError(
                f"Unable to fetch artifact with name {entity}/{project}/{name}"
            )
[31m[1mE           ValueError: Unable to fetch artifact with name tragoes/exercise_14/preprocessed_data.csv:latest
[31m[1m/home/lindsay/miniconda3/envs/mlflow-d2c8f82fbae4739797a400248dc26c5b3a522318/lib/python3.12/site-packages/wandb/sdk/artifacts/artifact.py[39m[22m:254: ValueError
[33mDuring handling of the above exception, another exception occurred:
request = <SubRequest 'data' for <Function test_column_presence_and_type>>
    @pytest.fixture(scope="session")
    def data(request):
        reference_artifact = request.config.option.reference_artifact
        if reference_artifact is None:
            pytest.fail("--reference_artifact missing on command line")
        sample_artifact = request.config.option.sample_artifact
        if sample_artifact is None:
            pytest.fail("--sample_artifact missing on command line")
>       local_path = run.use_artifact(reference_artifact).file()
[31m[1mconftest.py[39m[22m:28:
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _
[31m[1m/home/lindsay/miniconda3/envs/mlflow-d2c8f82fbae4739797a400248dc26c5b3a522318/lib/python3.12/site-packages/wandb/sdk/wandb_run.py[39m[22m:371: in wrapper_fn
    return func(self, *args, **kwargs)
[31m[1m/home/lindsay/miniconda3/envs/mlflow-d2c8f82fbae4739797a400248dc26c5b3a522318/lib/python3.12/site-packages/wandb/sdk/wandb_run.py[39m[22m:361: in wrapper
    return func(self, *args, **kwargs)
[31m[1m/home/lindsay/miniconda3/envs/mlflow-d2c8f82fbae4739797a400248dc26c5b3a522318/lib/python3.12/site-packages/wandb/sdk/wandb_run.py[39m[22m:2783: in use_artifact
    artifact = public_api.artifact(type=type, name=name)
[31m[1m/home/lindsay/miniconda3/envs/mlflow-d2c8f82fbae4739797a400248dc26c5b3a522318/lib/python3.12/site-packages/wandb/apis/normalize.py[39m[22m:87: in wrapper
    raise CommError(message, err).with_traceback(sys.exc_info()[2])
[31m[1m/home/lindsay/miniconda3/envs/mlflow-d2c8f82fbae4739797a400248dc26c5b3a522318/lib/python3.12/site-packages/wandb/apis/normalize.py[39m[22m:41: in wrapper
    return func(*args, **kwargs)
[31m[1m/home/lindsay/miniconda3/envs/mlflow-d2c8f82fbae4739797a400248dc26c5b3a522318/lib/python3.12/site-packages/wandb/apis/public/api.py[39m[22m:958: in artifact
    artifact = wandb.Artifact._from_name(
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _
cls = <class 'wandb.sdk.artifacts.artifact.Artifact'>, entity = 'tragoes', project = 'exercise_14'
name = 'preprocessed_data.csv:latest', client = <wandb.apis.public.api.RetryingClient object at 0x7f01bbfd83e0>
    @classmethod
    def _from_name(
        cls, entity: str, project: str, name: str, client: RetryingClient
    ) -> "Artifact":
        query = gql(
            """
            query ArtifactByName(
                $entityName: String!,
                $projectName: String!,
                $name: String!
            ) {
                project(name: $projectName, entityName: $entityName) {
                    artifact(name: $name) {
                        ...ArtifactFragment
                    }
                }
            }
            """
            + cls._get_gql_artifact_fragment()
        )
        response = client.execute(
            query,
            variable_values={
                "entityName": entity,
                "projectName": project,
                "name": name,
            },
        )
        attrs = response.get("project", {}).get("artifact")
        if attrs is None:
>           raise ValueError(
                f"Unable to fetch artifact with name {entity}/{project}/{name}"
            )
[31m[1mE           wandb.errors.CommError: Unable to fetch artifact with name tragoes/exercise_14/preprocessed_data.csv:latest
[31m[1m/home/lindsay/miniconda3/envs/mlflow-d2c8f82fbae4739797a400248dc26c5b3a522318/lib/python3.12/site-packages/wandb/sdk/artifacts/artifact.py[39m[22m:254: CommError
[33m=================================================== warnings summary ===================================================
<frozen importlib._bootstrap>:488
  <frozen importlib._bootstrap>:488: DeprecationWarning: Type google._upb._message.MessageMapContainer uses PyType_Spec with a metaclass that has custom tp_new. This is deprecated and will no longer be allowed in Python 3.14.
<frozen importlib._bootstrap>:488
  <frozen importlib._bootstrap>:488: DeprecationWarning: Type google._upb._message.ScalarMapContainer uses PyType_Spec with a metaclass that has custom tp_new. This is deprecated and will no longer be allowed in Python 3.14.
../../../../../../../../../../home/lindsay/miniconda3/envs/mlflow-d2c8f82fbae4739797a400248dc26c5b3a522318/lib/python3.12/site-packages/wandb/analytics/sentry.py:90
  /home/lindsay/miniconda3/envs/mlflow-d2c8f82fbae4739797a400248dc26c5b3a522318/lib/python3.12/site-packages/wandb/analytics/sentry.py:90: SentryHubDeprecationWarning: `sentry_sdk.Hub` is deprecated and will be removed in a future major release. Please consult our 1.x to 2.x migration guide for details on how to migrate `Hub` usage to the new API: https://docs.sentry.io/platforms/python/migration/1.x-to-2.x
    self.hub = sentry_sdk.Hub(client)
../../../../../../../../../../home/lindsay/miniconda3/envs/mlflow-d2c8f82fbae4739797a400248dc26c5b3a522318/lib/python3.12/site-packages/google/protobuf/internal/well_known_types.py:174: 4 warnings
test_data.py: 12 warnings
  /home/lindsay/miniconda3/envs/mlflow-d2c8f82fbae4739797a400248dc26c5b3a522318/lib/python3.12/site-packages/google/protobuf/internal/well_known_types.py:174: DeprecationWarning: datetime.datetime.utcnow() is deprecated and scheduled for removal in a future version. Use timezone-aware objects to represent datetimes in UTC: datetime.datetime.now(datetime.UTC).
    self.FromDatetime(datetime.datetime.utcnow())
-- Docs: https://docs.pytest.org/en/stable/how-to/capture-warnings.html
[36m[1m=============================================== short test summary info ================================================
[31mERROR[39m test_data.py::[1mtest_column_presence_and_type[22m - wandb.errors.CommError: Unable to fetch artifact with name tragoes/exercise_14/preprocessed_data.csv:latest
[31mERROR[39m test_data.py::[1mtest_class_names[22m - wandb.errors.CommError: Unable to fetch artifact with name tragoes/exercise_14/preprocessed_data.csv:latest
[31mERROR[39m test_data.py::[1mtest_column_ranges[22m - wandb.errors.CommError: Unable to fetch artifact with name tragoes/exercise_14/preprocessed_data.csv:latest
[31mERROR[39m test_data.py::[1mtest_kolmogorov_smirnov[22m - wandb.errors.CommError: Unable to fetch artifact with name tragoes/exercise_14/preprocessed_data.csv:latest
[31m============================================ [33m19 warnings[39m, [31m[1m4 errors[22m in 1.92s ============================================